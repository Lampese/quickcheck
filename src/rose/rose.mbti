package "moonbitlang/quickcheck/rose"

// Values
fn[T] apply(Rose[T], (T, Iter[Rose[T]]) -> Rose[T]) -> Rose[T]

fn[T, U] bind(Rose[T], (T) -> Rose[U]) -> Rose[U]

fn[T, U] fmap(Rose[T], (T) -> U) -> Rose[U]

fn[T] join(Rose[Rose[T]]) -> Rose[T]

fn[T] new(T, Iter[Rose[T]]) -> Rose[T]

fn[T] pure(T) -> Rose[T]

// Types and methods
pub(all) struct Rose[T] {
  val : T
  branch : Iter[Rose[T]]
}
impl Rose {
  apply[T](Self[T], (T, Iter[Self[T]]) -> Self[T]) -> Self[T]
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  fmap[T, U](Self[T], (T) -> U) -> Self[U]
  join[T](Self[Self[T]]) -> Self[T]
}
impl[T : Show] Show for Rose[T]

// Type aliases

// Traits

